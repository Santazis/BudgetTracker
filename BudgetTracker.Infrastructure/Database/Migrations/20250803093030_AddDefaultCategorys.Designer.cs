// <auto-generated />
using System;
using System.Collections.Generic;
using BudgetTracker.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BudgetTracker.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250803093030_AddDefaultCategorys")]
    partial class AddDefaultCategorys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BudgetTracker.Domain.Models.Category.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Category", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e14b446-b3c5-47b0-93ea-ac001ba12ff1"),
                            CreatedAt = new DateTime(2025, 8, 3, 9, 30, 30, 341, DateTimeKind.Utc).AddTicks(3020),
                            IsSystem = true,
                            Name = "Salary",
                            Type = "Income"
                        },
                        new
                        {
                            Id = new Guid("1619d348-f694-4ee5-8b23-0e1325c834b8"),
                            CreatedAt = new DateTime(2025, 8, 3, 9, 30, 30, 341, DateTimeKind.Utc).AddTicks(3284),
                            IsSystem = true,
                            Name = "Freelance",
                            Type = "Income"
                        },
                        new
                        {
                            Id = new Guid("75e9948e-f798-4219-8976-b39af80dbe07"),
                            CreatedAt = new DateTime(2025, 8, 3, 9, 30, 30, 341, DateTimeKind.Utc).AddTicks(3285),
                            IsSystem = true,
                            Name = "Food",
                            Type = "Expense"
                        },
                        new
                        {
                            Id = new Guid("a7787884-a503-4678-851e-1d126a3934ac"),
                            CreatedAt = new DateTime(2025, 8, 3, 9, 30, 30, 341, DateTimeKind.Utc).AddTicks(3292),
                            IsSystem = true,
                            Name = "Transport",
                            Type = "Expense"
                        },
                        new
                        {
                            Id = new Guid("c3c395b3-c359-4cce-b81b-a48df0f3558d"),
                            CreatedAt = new DateTime(2025, 8, 3, 9, 30, 30, 341, DateTimeKind.Utc).AddTicks(3293),
                            IsSystem = true,
                            Name = "Rent",
                            Type = "Expense"
                        },
                        new
                        {
                            Id = new Guid("cf58cf96-6694-4aa7-aa75-ed279c5379a8"),
                            CreatedAt = new DateTime(2025, 8, 3, 9, 30, 30, 341, DateTimeKind.Utc).AddTicks(3297),
                            IsSystem = true,
                            Name = "Internet",
                            Type = "Expense"
                        },
                        new
                        {
                            Id = new Guid("ae88da41-bccf-4889-9748-4539ad421980"),
                            CreatedAt = new DateTime(2025, 8, 3, 9, 30, 30, 341, DateTimeKind.Utc).AddTicks(3298),
                            IsSystem = true,
                            Name = "Clothing",
                            Type = "Expense"
                        },
                        new
                        {
                            Id = new Guid("3c9aca24-51f8-467d-a5ca-adcba6081089"),
                            CreatedAt = new DateTime(2025, 8, 3, 9, 30, 30, 341, DateTimeKind.Utc).AddTicks(3299),
                            IsSystem = true,
                            Name = "Health",
                            Type = "Expense"
                        },
                        new
                        {
                            Id = new Guid("9f1b5a18-4335-45c6-8de2-d252d9e71eb9"),
                            CreatedAt = new DateTime(2025, 8, 3, 9, 30, 30, 341, DateTimeKind.Utc).AddTicks(3300),
                            IsSystem = true,
                            Name = "Education",
                            Type = "Expense"
                        });
                });

            modelBuilder.Entity("BudgetTracker.Domain.Models.Transaction.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "BudgetTracker.Domain.Models.Transaction.Transaction.Amount#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Currency");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction", "public");
                });

            modelBuilder.Entity("BudgetTracker.Domain.Models.User.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("Revoked");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", "public");
                });

            modelBuilder.Entity("BudgetTracker.Domain.Models.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(124)
                        .HasColumnType("character varying(124)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "BudgetTracker.Domain.Models.User.User.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Firstname")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("Lastname")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LastName");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", "public");
                });

            modelBuilder.Entity("BudgetTracker.Domain.Models.Category.Category", b =>
                {
                    b.HasOne("BudgetTracker.Domain.Models.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BudgetTracker.Domain.Models.Transaction.Transaction", b =>
                {
                    b.HasOne("BudgetTracker.Domain.Models.Category.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BudgetTracker.Domain.Models.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BudgetTracker.Domain.Models.User.RefreshToken", b =>
                {
                    b.HasOne("BudgetTracker.Domain.Models.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
